What happens when you initialize a repository? Why do you need to do it?

When repository is initialized .git folder is created. It is needed later for storing all information associated with version controls.

How is the staging area different from the working directory and the repository? What value do you think it offers?

In order to create repository we have 3 steps. We begin being in the working directory, we initialize git by git init, then we are at the staging area, where we add (via git add) files, then we are in the final stage, we do commit. Staging are allows to specify files we later want to have in comit.

How can you use the staging area to make sure you have one commit per logical change?

We can add files to the staging area one by one (i.e. one commit per logical change)

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches will be useful for example if we make 2nd and 3rd part of software, or we do different-languages versions. In that way, having master branch, not afraid of messing it up, we are able to further develop code in other branches.

How do the diagrams help you visualize the branch structure?

Each branch is visible and it is possible to track parents, as well as commits that might get lost.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

We are having one branch, it is represented with two arrows, as it includes all commits two branches had.
